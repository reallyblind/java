<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--
    namespace:命名空间
-->
<mapper namespace="com.itheima.mapper.BrandMapper">
<!--
    数据库表的字段名称 和 实体类的属性名称不一样，则不能自动封装数据
    * 起别名：对不一样的列明其别名，让别名和实体类的属性名一样
        *缺点：每次查询都要定义一次别名
            *sql片段
                *不灵活
    *resultMap:
        1.定义<resultMap>标签
        2.在<select>标签中，使用resultMap属性替换resultType属性
-->
<!--
    id：唯一标识
    type：映射的类型，支持别名
-->
    <resultMap id="brandResultMap" type="brand">
        <!--
            id：完成主键字段的映射
                column:表的列名
                property:实体类的属性名
            result：完成一般字段的映射
                column:表的列名
                property:实体类的属性名
        -->
        <result column="brand_name" property="brandName"/>
        <result column="company_name" property="companyName"/>

    </resultMap>


    <select id="selectAll" resultMap="brandResultMap">
            select
            *
            from tb_brand;
    </select>


    <!--
        *参数占位符：
            1.#{}：会将其替换为？，为了防止SQL注入
            2.${}：拼sql，会存在SQL注入
            3.使用时机：
                *参数传递的时候：#{}
                *表名或者列名不固定的情况下：${}会存在SQL注入问题

            *参数类型：parameterType：可以省略
            *特殊字符处理：
                1.转义字符  &lt;为<
                2.CDATA区  CD
    -->
    <select id="selectById" resultMap="brandResultMap">
        select * from
        tb_brand where id
        <![CDATA[
            <
        ]]>#{id};
    </select>


    <!--
        sql片段：
    -->
<!--    <sql id="brand_column">-->
<!--        id,brand_name as brandName,company_name as companyName, description,status-->
<!--    </sql>-->


<!--    <select id="selectAll" resultType="brand">-->
<!--        select-->
<!--        <include refid="brand_column"></include>-->
<!--        from tb_brand;-->
<!--    </select>-->

    <!--
        条件查询
    -->
   <!-- <select id="selectByCondition" resultMap="brandResultMap">
        select *
        from tb_brand
        where status=#{status} and company_name like #{companyName} and brand_name like #{brandName}
    </select>-->

    <!--
        动态条件查询
            *if:条件判断
                *test:逻辑表达式
            *判断：
                *恒等式
                *<where> 替换 where 关键字
    -->
    <select id="selectByCondition" resultMap="brandResultMap">
        select *
        from tb_brand
#         where 1=1
    <where>
        <if test="status != null">
            and   status=#{status}
        </if>
        <if test="companyName != null and companyName!=''">
            and company_name like #{companyName}
        </if>
        <if test="brandName!=null and brandName!='' ">
            and brand_name like #{brandName}
        </if>

    </where>

    </select>

    <!--<select id="selectByConditionSingle" resultMap="brandResultMap">
        select *
        from tb_brand
        where
        <choose> &lt;!&ndash;相当于swith&ndash;&gt;
            <when test="status != null">
                status = #{status};
            </when>&lt;!&ndash;相当于case&ndash;&gt;
            <when test="companyName != null and companyName!=''">
                companyName = #{companyName};
            </when>
            <when test="brandName!=null and brandName!=''">
                brandName = #{brandName};
            </when>
            <otherwise>&lt;!&ndash;相当于default&ndash;&gt;
                1=1;
            </otherwise>
        </choose>

    </select>-->

    <select id="selectByConditionSingle" resultMap="brandResultMap">
        select *
        from tb_brand
        <where>
            <choose> <!--相当于swith-->
                <when test="status != null">
                    status = #{status};
                </when><!--相当于case-->
                <when test="companyName != null and companyName!=''">
                    companyName = #{companyName};
                </when>
                <when test="brandName!=null and brandName!=''">
                    brandName = #{brandName};
                </when>

            </choose>
        </where>
    </select>



    <insert id="add" useGeneratedKeys="true" keyProperty="id">
        insert into tb_brand (brand_name, company_name, ordered, description, status)
        values (#{brandName},#{companyName},#{ordered},#{description},#{status});
    </insert>


    <update id="update">
        update tb_brand
        <set>
            <if test="brandName!=null and brandName!=''">
                brand_name = #{brandName},
            </if>
            <if test="companyName!=null and companyName!=''">
                company_name = #{companyName},
            </if>
            <if test="ordered!=null">
                ordered = #{ordered},
            </if>
            <if test="description!=null and description!=''">
                description = #{description},
            </if>
            <if test="status!=null">
                status = #{status}
            </if>
        </set>
        where id = #{id};
    </update>


    <delete id="delectById">
        delete from tb_brand
        where id = #{id};
    </delete>

    <!--
        MyBatis会将数组的参数封装为一个Map集合
            *默认：array = 数组
            *使用@Param注解改变map集合的默认key的名称
    -->
    <delete id="deleteByIds">
        delete from tb_brand where id
        in
            <foreach collection="ids" item="id" separator="," open="(" close=")">
                #{id}
            </foreach>
            ;
    </delete>


</mapper>